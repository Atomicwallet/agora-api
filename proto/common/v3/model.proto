syntax = "proto3";

package kin.common.v3;

option go_package = "github.com/kinecosystem/kin-api/genproto/common/v3;common";
option java_package = "org.kin.gen.common.v3";

import "validate/validate.proto";

message StellarAccountId {
    // The public key of accounts always starts with a G, so we
    // ensure that the value starts with a G to prevent the secret
    // key from being used.
    string value = 1 [(validate.rules).string = {
        pattern: "^G[a-zA-Z0-9]*$"
        min_bytes: 56
        max_bytes: 56
    }];
}

message TransactionHash {
    // The sha256 hash of a transaction.
    bytes value = 1 [(validate.rules).bytes = {
        min_len: 32
        max_len: 32
    }];
}

message BigDecimal {
    string value = 1 [(validate.rules).string = {
        pattern: "^(?:[1-9][0-9]{0,14}|0)(?:\\.[0-9]{0,11}[1-9])?$"
    }];
}

message AgoraDataUrl {
    string value = 1 [(validate.rules).string = {
        min_len: 1
        max_len: 2048 // URL Maximum size
    }];
}

message AgoraData {
    // A renderable title related to the transaction.
    string title = 1 [(validate.rules).string = {
        min_len: 1
        max_len: 256
    }];
    // A renderable description related to the transaction.
    string description = 2 [(validate.rules).string = {
        min_len: 1
        max_len: 1024
    }];

    TransactionType transaction_type = 3;
    enum TransactionType {
        UNKNOWN = 0;
        EARN    = 1;
        SPEND   = 2;
        P2P     = 3;
    }

    // The full foreign key of the off-chain data, which is
    // prefixed in the memo. This can be treated similar SKU.
    bytes foreign_key = 4 [(validate.rules).bytes = {
        min_len: 256
        max_len: 256
    }];

    // The price, in quarks, of the 'item' the transaction
    // was related to. This should be the same as the transaction
    // amount. If there is a mismatch, then the client mis-used or
    // abused the memo system, likely by circumventing the Agora
    // services.
    int64 quark_price = 5;
}
