apply plugin: "java"
apply plugin: "com.google.protobuf"
apply plugin: "maven"
apply plugin: "maven-publish"
apply plugin: "com.jfrog.bintray"

version = '0.0.4'
group = 'org.kin.gen'

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.6'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.5'
    }
}

repositories {
    mavenCentral()
    maven {
        url 'https://jitpack.io'
        credentials { username jitpackAuthToken }
    }
}

def grpcVersion = "1.18.0"
def validateVersion = "0.2.0"
dependencies {
    compile "io.grpc:grpc-protobuf:${grpcVersion}"
    compile "io.grpc:grpc-stub:${grpcVersion}"
    compile "io.envoyproxy.protoc-gen-validate:pgv-java-stub:${validateVersion}"
}

def generatedSrcRoot = file("${buildDir}/generated/source/proto/main/java/")
sourceSets.main {
    proto {
        srcDir "${rootDir}/../../proto"
    }
    java {
        srcDirs = ["${generatedSrcRoot}"]
    }
}

compileJava {
    options.annotationProcessorGeneratedSourcesDirectory generatedSrcRoot
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.5.1-1"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
        javapgv {
            artifact = "io.envoyproxy.protoc-gen-validate:protoc-gen-validate:0.1.0"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
            javapgv {
                option "lang=java"
            }
        }
    }
}

jar {
    manifest {
        attributes('kin-api': project.name,
                'Version': project.version)
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from project.components.java
            artifact sourcesJar

            pom.withXml {
                def depNode
                def depNodes = asNode().get('dependencies')
                if (depNodes.size() == 0) {
                    depNode = asNode().appendNode('dependencies')
                } else {
                    depNode = depNodes.get(0)
                }

                // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.implementation.allDependencies.each {
                    // Ensure dependencies such as fileTree are not included in the pom.
                    if (it.name != 'unspecified') {
                        def dependencyNode = depNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? bintrayUser : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayKey') ? bintrayKey : System.getenv('BINTRAY_API_KEY')

    publications = ['mavenJava']

    pkg {
        repo = 'kin-api-internal'
        name = 'org.kin.gen'
        userOrg = 'kinecosystem'
        licenses = ['Kin Ecosystem SDK License']
        websiteUrl = "https://github.com/kinecosystem/kin-api-internal"
        iisueTrackerUrl = "https://github.com/kinecosystem/kin-api-internal/issues"
        vcsUrl = 'https://github.com/kinecosystem/kin-api-internal.git'
        version {
            name = this.version
            vcsTag = String.format('v%s', version)
        }
    }
}
