// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: offer/v3/offer_service.proto

package offer

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _offer_service_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on GetOffersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetOffersRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetOffersRequestValidationError is the validation error returned by
// GetOffersRequest.Validate if the designated constraints aren't met.
type GetOffersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOffersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOffersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOffersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOffersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOffersRequestValidationError) ErrorName() string { return "GetOffersRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetOffersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOffersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOffersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOffersRequestValidationError{}

// Validate checks the field values on GetOffersResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetOffersResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetOffersResponseValidationError is the validation error returned by
// GetOffersResponse.Validate if the designated constraints aren't met.
type GetOffersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOffersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOffersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOffersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOffersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOffersResponseValidationError) ErrorName() string {
	return "GetOffersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOffersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOffersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOffersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOffersResponseValidationError{}

// Validate checks the field values on ClaimOfferRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ClaimOfferRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ClaimOfferRequestValidationError is the validation error returned by
// ClaimOfferRequest.Validate if the designated constraints aren't met.
type ClaimOfferRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClaimOfferRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClaimOfferRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClaimOfferRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClaimOfferRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClaimOfferRequestValidationError) ErrorName() string {
	return "ClaimOfferRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ClaimOfferRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClaimOfferRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClaimOfferRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClaimOfferRequestValidationError{}

// Validate checks the field values on ClaimOfferResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ClaimOfferResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ClaimOfferResponseValidationError is the validation error returned by
// ClaimOfferResponse.Validate if the designated constraints aren't met.
type ClaimOfferResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClaimOfferResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClaimOfferResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClaimOfferResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClaimOfferResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClaimOfferResponseValidationError) ErrorName() string {
	return "ClaimOfferResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ClaimOfferResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClaimOfferResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClaimOfferResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClaimOfferResponseValidationError{}
