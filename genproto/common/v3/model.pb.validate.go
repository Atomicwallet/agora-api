// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: common/v3/model.proto

package common

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _model_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on StellarAccountId with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *StellarAccountId) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetValue()) != 56 {
		return StellarAccountIdValidationError{
			field:  "Value",
			reason: "value length must be 56 bytes",
		}
	}

	if !_StellarAccountId_Value_Pattern.MatchString(m.GetValue()) {
		return StellarAccountIdValidationError{
			field:  "Value",
			reason: "value does not match regex pattern \"^G[a-zA-Z0-9]*$\"",
		}
	}

	return nil
}

// StellarAccountIdValidationError is the validation error returned by
// StellarAccountId.Validate if the designated constraints aren't met.
type StellarAccountIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StellarAccountIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StellarAccountIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StellarAccountIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StellarAccountIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StellarAccountIdValidationError) ErrorName() string { return "StellarAccountIdValidationError" }

// Error satisfies the builtin error interface
func (e StellarAccountIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStellarAccountId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StellarAccountIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StellarAccountIdValidationError{}

var _StellarAccountId_Value_Pattern = regexp.MustCompile("^G[a-zA-Z0-9]*$")

// Validate checks the field values on TransactionHash with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *TransactionHash) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetValue()) != 32 {
		return TransactionHashValidationError{
			field:  "Value",
			reason: "value length must be 32 bytes",
		}
	}

	return nil
}

// TransactionHashValidationError is the validation error returned by
// TransactionHash.Validate if the designated constraints aren't met.
type TransactionHashValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionHashValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionHashValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionHashValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionHashValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionHashValidationError) ErrorName() string { return "TransactionHashValidationError" }

// Error satisfies the builtin error interface
func (e TransactionHashValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransactionHash.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionHashValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionHashValidationError{}

// Validate checks the field values on InvoiceHash with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *InvoiceHash) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetValue()) != 28 {
		return InvoiceHashValidationError{
			field:  "Value",
			reason: "value length must be 28 bytes",
		}
	}

	return nil
}

// InvoiceHashValidationError is the validation error returned by
// InvoiceHash.Validate if the designated constraints aren't met.
type InvoiceHashValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InvoiceHashValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InvoiceHashValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InvoiceHashValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InvoiceHashValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InvoiceHashValidationError) ErrorName() string { return "InvoiceHashValidationError" }

// Error satisfies the builtin error interface
func (e InvoiceHashValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInvoiceHash.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InvoiceHashValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InvoiceHashValidationError{}

// Validate checks the field values on Invoice with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Invoice) Validate() error {
	if m == nil {
		return nil
	}

	if l := len(m.GetItems()); l < 1 || l > 1024 {
		return InvoiceValidationError{
			field:  "Items",
			reason: "value must contain between 1 and 1024 items, inclusive",
		}
	}

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InvoiceValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// InvoiceValidationError is the validation error returned by Invoice.Validate
// if the designated constraints aren't met.
type InvoiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InvoiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InvoiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InvoiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InvoiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InvoiceValidationError) ErrorName() string { return "InvoiceValidationError" }

// Error satisfies the builtin error interface
func (e InvoiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInvoice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InvoiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InvoiceValidationError{}

// Validate checks the field values on InvoiceList with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *InvoiceList) Validate() error {
	if m == nil {
		return nil
	}

	if l := len(m.GetInvoices()); l < 1 || l > 100 {
		return InvoiceListValidationError{
			field:  "Invoices",
			reason: "value must contain between 1 and 100 items, inclusive",
		}
	}

	for idx, item := range m.GetInvoices() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InvoiceListValidationError{
					field:  fmt.Sprintf("Invoices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// InvoiceListValidationError is the validation error returned by
// InvoiceList.Validate if the designated constraints aren't met.
type InvoiceListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InvoiceListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InvoiceListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InvoiceListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InvoiceListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InvoiceListValidationError) ErrorName() string { return "InvoiceListValidationError" }

// Error satisfies the builtin error interface
func (e InvoiceListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInvoiceList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InvoiceListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InvoiceListValidationError{}

// Validate checks the field values on Invoice_LineItem with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *Invoice_LineItem) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 128 {
		return Invoice_LineItemValidationError{
			field:  "Title",
			reason: "value length must be between 1 and 128 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetDescription()); l < 0 || l > 256 {
		return Invoice_LineItemValidationError{
			field:  "Description",
			reason: "value length must be between 0 and 256 runes, inclusive",
		}
	}

	// no validation rules for Amount

	if len(m.GetSku()) > 128 {
		return Invoice_LineItemValidationError{
			field:  "Sku",
			reason: "value length must be at most 128 bytes",
		}
	}

	return nil
}

// Invoice_LineItemValidationError is the validation error returned by
// Invoice_LineItem.Validate if the designated constraints aren't met.
type Invoice_LineItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Invoice_LineItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Invoice_LineItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Invoice_LineItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Invoice_LineItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Invoice_LineItemValidationError) ErrorName() string { return "Invoice_LineItemValidationError" }

// Error satisfies the builtin error interface
func (e Invoice_LineItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInvoice_LineItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Invoice_LineItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Invoice_LineItemValidationError{}
