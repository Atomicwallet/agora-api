// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: common/v4/model.proto

package common

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _model_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on SolanaAccountId with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SolanaAccountId) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetValue()) != 32 {
		return SolanaAccountIdValidationError{
			field:  "Value",
			reason: "value length must be 32 bytes",
		}
	}

	return nil
}

// SolanaAccountIdValidationError is the validation error returned by
// SolanaAccountId.Validate if the designated constraints aren't met.
type SolanaAccountIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SolanaAccountIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SolanaAccountIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SolanaAccountIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SolanaAccountIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SolanaAccountIdValidationError) ErrorName() string { return "SolanaAccountIdValidationError" }

// Error satisfies the builtin error interface
func (e SolanaAccountIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSolanaAccountId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SolanaAccountIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SolanaAccountIdValidationError{}

// Validate checks the field values on TransactionId with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TransactionId) Validate() error {
	if m == nil {
		return nil
	}

	if l := len(m.GetValue()); l < 32 || l > 64 {
		return TransactionIdValidationError{
			field:  "Value",
			reason: "value length must be between 32 and 64 bytes, inclusive",
		}
	}

	return nil
}

// TransactionIdValidationError is the validation error returned by
// TransactionId.Validate if the designated constraints aren't met.
type TransactionIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionIdValidationError) ErrorName() string { return "TransactionIdValidationError" }

// Error satisfies the builtin error interface
func (e TransactionIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransactionId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionIdValidationError{}

// Validate checks the field values on Blockhash with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Blockhash) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetValue()) != 32 {
		return BlockhashValidationError{
			field:  "Value",
			reason: "value length must be 32 bytes",
		}
	}

	return nil
}

// BlockhashValidationError is the validation error returned by
// Blockhash.Validate if the designated constraints aren't met.
type BlockhashValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlockhashValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlockhashValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlockhashValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlockhashValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlockhashValidationError) ErrorName() string { return "BlockhashValidationError" }

// Error satisfies the builtin error interface
func (e BlockhashValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlockhash.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlockhashValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlockhashValidationError{}

// Validate checks the field values on TransactionSignature with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TransactionSignature) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetValue()) != 64 {
		return TransactionSignatureValidationError{
			field:  "Value",
			reason: "value length must be 64 bytes",
		}
	}

	return nil
}

// TransactionSignatureValidationError is the validation error returned by
// TransactionSignature.Validate if the designated constraints aren't met.
type TransactionSignatureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionSignatureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionSignatureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionSignatureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionSignatureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionSignatureValidationError) ErrorName() string {
	return "TransactionSignatureValidationError"
}

// Error satisfies the builtin error interface
func (e TransactionSignatureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransactionSignature.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionSignatureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionSignatureValidationError{}

// Validate checks the field values on Transaction with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Transaction) Validate() error {
	if m == nil {
		return nil
	}

	if l := len(m.GetValue()); l < 1 || l > 1232 {
		return TransactionValidationError{
			field:  "Value",
			reason: "value length must be between 1 and 1232 bytes, inclusive",
		}
	}

	return nil
}

// TransactionValidationError is the validation error returned by
// Transaction.Validate if the designated constraints aren't met.
type TransactionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionValidationError) ErrorName() string { return "TransactionValidationError" }

// Error satisfies the builtin error interface
func (e TransactionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransaction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionValidationError{}

// Validate checks the field values on TransactionError with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *TransactionError) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Reason

	// no validation rules for InstructionIndex

	if l := len(m.GetRaw()); l < 1 || l > 10240 {
		return TransactionErrorValidationError{
			field:  "Raw",
			reason: "value length must be between 1 and 10240 bytes, inclusive",
		}
	}

	return nil
}

// TransactionErrorValidationError is the validation error returned by
// TransactionError.Validate if the designated constraints aren't met.
type TransactionErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionErrorValidationError) ErrorName() string { return "TransactionErrorValidationError" }

// Error satisfies the builtin error interface
func (e TransactionErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransactionError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionErrorValidationError{}

// Validate checks the field values on StellarTransaction with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *StellarTransaction) Validate() error {
	if m == nil {
		return nil
	}

	if l := len(m.GetResultXdr()); l < 1 || l > 10240 {
		return StellarTransactionValidationError{
			field:  "ResultXdr",
			reason: "value length must be between 1 and 10240 bytes, inclusive",
		}
	}

	if l := len(m.GetEnvelopeXdr()); l < 1 || l > 10240 {
		return StellarTransactionValidationError{
			field:  "EnvelopeXdr",
			reason: "value length must be between 1 and 10240 bytes, inclusive",
		}
	}

	return nil
}

// StellarTransactionValidationError is the validation error returned by
// StellarTransaction.Validate if the designated constraints aren't met.
type StellarTransactionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StellarTransactionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StellarTransactionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StellarTransactionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StellarTransactionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StellarTransactionValidationError) ErrorName() string {
	return "StellarTransactionValidationError"
}

// Error satisfies the builtin error interface
func (e StellarTransactionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStellarTransaction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StellarTransactionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StellarTransactionValidationError{}
