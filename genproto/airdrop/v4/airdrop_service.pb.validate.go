// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: airdrop/v4/airdrop_service.proto

package airdrop

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"

	common "github.com/kinecosystem/agora-api/genproto/common/v4"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}

	_ = common.Commitment(0)
)

// define the regex for a UUID once up-front
var _airdrop_service_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on RequestAirdropRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RequestAirdropRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetAccountId() == nil {
		return RequestAirdropRequestValidationError{
			field:  "AccountId",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetAccountId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequestAirdropRequestValidationError{
				field:  "AccountId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetQuarks() <= 1 {
		return RequestAirdropRequestValidationError{
			field:  "Quarks",
			reason: "value must be greater than 1",
		}
	}

	// no validation rules for Commitment

	return nil
}

// RequestAirdropRequestValidationError is the validation error returned by
// RequestAirdropRequest.Validate if the designated constraints aren't met.
type RequestAirdropRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestAirdropRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestAirdropRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestAirdropRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestAirdropRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestAirdropRequestValidationError) ErrorName() string {
	return "RequestAirdropRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RequestAirdropRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestAirdropRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestAirdropRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestAirdropRequestValidationError{}

// Validate checks the field values on RequestAirdropResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RequestAirdropResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Result

	if v, ok := interface{}(m.GetSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequestAirdropResponseValidationError{
				field:  "Signature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RequestAirdropResponseValidationError is the validation error returned by
// RequestAirdropResponse.Validate if the designated constraints aren't met.
type RequestAirdropResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestAirdropResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestAirdropResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestAirdropResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestAirdropResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestAirdropResponseValidationError) ErrorName() string {
	return "RequestAirdropResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RequestAirdropResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestAirdropResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestAirdropResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestAirdropResponseValidationError{}
