// Code generated by protoc-gen-go. DO NOT EDIT.
// source: metrics/v3/ingestion_service.proto

package metrics

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SubmitResponse_Result int32

const (
	SubmitResponse_OK SubmitResponse_Result = 0
)

var SubmitResponse_Result_name = map[int32]string{
	0: "OK",
}

var SubmitResponse_Result_value = map[string]int32{
	"OK": 0,
}

func (x SubmitResponse_Result) String() string {
	return proto.EnumName(SubmitResponse_Result_name, int32(x))
}

func (SubmitResponse_Result) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_914678a26d61e0c1, []int{1, 0}
}

type SubmitRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubmitRequest) Reset()         { *m = SubmitRequest{} }
func (m *SubmitRequest) String() string { return proto.CompactTextString(m) }
func (*SubmitRequest) ProtoMessage()    {}
func (*SubmitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_914678a26d61e0c1, []int{0}
}

func (m *SubmitRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubmitRequest.Unmarshal(m, b)
}
func (m *SubmitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubmitRequest.Marshal(b, m, deterministic)
}
func (m *SubmitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitRequest.Merge(m, src)
}
func (m *SubmitRequest) XXX_Size() int {
	return xxx_messageInfo_SubmitRequest.Size(m)
}
func (m *SubmitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitRequest proto.InternalMessageInfo

type SubmitResponse struct {
	Result               SubmitResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=kin.metrics.v3.SubmitResponse_Result" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *SubmitResponse) Reset()         { *m = SubmitResponse{} }
func (m *SubmitResponse) String() string { return proto.CompactTextString(m) }
func (*SubmitResponse) ProtoMessage()    {}
func (*SubmitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_914678a26d61e0c1, []int{1}
}

func (m *SubmitResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubmitResponse.Unmarshal(m, b)
}
func (m *SubmitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubmitResponse.Marshal(b, m, deterministic)
}
func (m *SubmitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitResponse.Merge(m, src)
}
func (m *SubmitResponse) XXX_Size() int {
	return xxx_messageInfo_SubmitResponse.Size(m)
}
func (m *SubmitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitResponse proto.InternalMessageInfo

func (m *SubmitResponse) GetResult() SubmitResponse_Result {
	if m != nil {
		return m.Result
	}
	return SubmitResponse_OK
}

func init() {
	proto.RegisterEnum("kin.metrics.v3.SubmitResponse_Result", SubmitResponse_Result_name, SubmitResponse_Result_value)
	proto.RegisterType((*SubmitRequest)(nil), "kin.metrics.v3.SubmitRequest")
	proto.RegisterType((*SubmitResponse)(nil), "kin.metrics.v3.SubmitResponse")
}

func init() { proto.RegisterFile("metrics/v3/ingestion_service.proto", fileDescriptor_914678a26d61e0c1) }

var fileDescriptor_914678a26d61e0c1 = []byte{
	// 235 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0x41, 0x4b, 0xc4, 0x30,
	0x10, 0x85, 0x5d, 0x0f, 0x01, 0x07, 0xac, 0x4b, 0x0e, 0x22, 0x82, 0x22, 0x05, 0xc1, 0xcb, 0x26,
	0xb0, 0x3d, 0x8a, 0x17, 0x11, 0x44, 0x3c, 0x08, 0xd5, 0x93, 0x07, 0xa5, 0x2d, 0x43, 0x1c, 0x76,
	0x9b, 0xd4, 0xcc, 0xa4, 0xe0, 0xbf, 0x17, 0xb2, 0x5d, 0x74, 0x0f, 0x7a, 0x4b, 0x5e, 0xbe, 0xf7,
	0xf2, 0x78, 0x50, 0xf6, 0x28, 0x91, 0x3a, 0xb6, 0x63, 0x65, 0xc9, 0x3b, 0x64, 0xa1, 0xe0, 0xdf,
	0x19, 0xe3, 0x48, 0x1d, 0x9a, 0x21, 0x06, 0x09, 0xba, 0x58, 0x91, 0x37, 0x13, 0x67, 0xc6, 0xaa,
	0x3c, 0x82, 0xc3, 0xe7, 0xd4, 0xf6, 0x24, 0x35, 0x7e, 0x26, 0x64, 0x29, 0x1b, 0x28, 0xb6, 0x02,
	0x0f, 0xc1, 0x33, 0xea, 0x1b, 0x50, 0x11, 0x39, 0xad, 0xe5, 0x64, 0x76, 0x31, 0xbb, 0x2a, 0x96,
	0x97, 0x66, 0x37, 0xc3, 0xec, 0xf2, 0xa6, 0xce, 0x70, 0x3d, 0x99, 0xca, 0x39, 0xa8, 0x8d, 0xa2,
	0x15, 0xec, 0x3f, 0x3d, 0xce, 0xf7, 0x96, 0x2f, 0x70, 0xf0, 0xb0, 0xad, 0xa7, 0xef, 0x41, 0x6d,
	0xfc, 0xfa, 0xec, 0xaf, 0xdc, 0x5c, 0xec, 0xf4, 0xfc, 0xff, 0x6f, 0x6f, 0xdf, 0xe0, 0x38, 0x44,
	0x97, 0x21, 0x87, 0xbf, 0xc1, 0xd7, 0x3b, 0x47, 0xf2, 0x91, 0x5a, 0xd3, 0x85, 0xde, 0xae, 0xc8,
	0x63, 0x17, 0xf8, 0x8b, 0x05, 0xf3, 0x65, 0xd1, 0x0c, 0xb4, 0x20, 0x2f, 0x18, 0x7d, 0xb3, 0xb6,
	0x0e, 0x7d, 0x9e, 0xc9, 0xfe, 0x2c, 0x79, 0x3d, 0x1d, 0x5b, 0x95, 0x5f, 0xaa, 0xef, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x94, 0x24, 0xd2, 0x7c, 0x66, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IngestionClient is the client API for Ingestion service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IngestionClient interface {
	Submit(ctx context.Context, in *SubmitRequest, opts ...grpc.CallOption) (*SubmitResponse, error)
}

type ingestionClient struct {
	cc *grpc.ClientConn
}

func NewIngestionClient(cc *grpc.ClientConn) IngestionClient {
	return &ingestionClient{cc}
}

func (c *ingestionClient) Submit(ctx context.Context, in *SubmitRequest, opts ...grpc.CallOption) (*SubmitResponse, error) {
	out := new(SubmitResponse)
	err := c.cc.Invoke(ctx, "/kin.metrics.v3.Ingestion/Submit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IngestionServer is the server API for Ingestion service.
type IngestionServer interface {
	Submit(context.Context, *SubmitRequest) (*SubmitResponse, error)
}

// UnimplementedIngestionServer can be embedded to have forward compatible implementations.
type UnimplementedIngestionServer struct {
}

func (*UnimplementedIngestionServer) Submit(ctx context.Context, req *SubmitRequest) (*SubmitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Submit not implemented")
}

func RegisterIngestionServer(s *grpc.Server, srv IngestionServer) {
	s.RegisterService(&_Ingestion_serviceDesc, srv)
}

func _Ingestion_Submit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServer).Submit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kin.metrics.v3.Ingestion/Submit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServer).Submit(ctx, req.(*SubmitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Ingestion_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kin.metrics.v3.Ingestion",
	HandlerType: (*IngestionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Submit",
			Handler:    _Ingestion_Submit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metrics/v3/ingestion_service.proto",
}
