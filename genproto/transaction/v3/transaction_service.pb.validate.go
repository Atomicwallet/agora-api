// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: transaction/v3/transaction_service.proto

package transaction

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _transaction_service_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on GetBalanceRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetBalanceRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetBalanceRequestValidationError is the validation error returned by
// GetBalanceRequest.Validate if the designated constraints aren't met.
type GetBalanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBalanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBalanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBalanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBalanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBalanceRequestValidationError) ErrorName() string {
	return "GetBalanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBalanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBalanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBalanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBalanceRequestValidationError{}

// Validate checks the field values on GetBalanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetBalanceResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetBalanceResponseValidationError is the validation error returned by
// GetBalanceResponse.Validate if the designated constraints aren't met.
type GetBalanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBalanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBalanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBalanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBalanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBalanceResponseValidationError) ErrorName() string {
	return "GetBalanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBalanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBalanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBalanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBalanceResponseValidationError{}

// Validate checks the field values on GetHistoryRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetHistoryRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetHistoryRequestValidationError is the validation error returned by
// GetHistoryRequest.Validate if the designated constraints aren't met.
type GetHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHistoryRequestValidationError) ErrorName() string {
	return "GetHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHistoryRequestValidationError{}

// Validate checks the field values on GetHistoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetHistoryResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetHistoryResponseValidationError is the validation error returned by
// GetHistoryResponse.Validate if the designated constraints aren't met.
type GetHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHistoryResponseValidationError) ErrorName() string {
	return "GetHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHistoryResponseValidationError{}

// Validate checks the field values on SubmitSendRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SubmitSendRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// SubmitSendRequestValidationError is the validation error returned by
// SubmitSendRequest.Validate if the designated constraints aren't met.
type SubmitSendRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitSendRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitSendRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitSendRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitSendRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitSendRequestValidationError) ErrorName() string {
	return "SubmitSendRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitSendRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitSendRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitSendRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitSendRequestValidationError{}

// Validate checks the field values on SubmitSendResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SubmitSendResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// SubmitSendResponseValidationError is the validation error returned by
// SubmitSendResponse.Validate if the designated constraints aren't met.
type SubmitSendResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitSendResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitSendResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitSendResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitSendResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitSendResponseValidationError) ErrorName() string {
	return "SubmitSendResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitSendResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitSendResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitSendResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitSendResponseValidationError{}

// Validate checks the field values on WaitForTxnRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *WaitForTxnRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// WaitForTxnRequestValidationError is the validation error returned by
// WaitForTxnRequest.Validate if the designated constraints aren't met.
type WaitForTxnRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WaitForTxnRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WaitForTxnRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WaitForTxnRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WaitForTxnRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WaitForTxnRequestValidationError) ErrorName() string {
	return "WaitForTxnRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WaitForTxnRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWaitForTxnRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WaitForTxnRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WaitForTxnRequestValidationError{}

// Validate checks the field values on WaitForTxnResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *WaitForTxnResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// WaitForTxnResponseValidationError is the validation error returned by
// WaitForTxnResponse.Validate if the designated constraints aren't met.
type WaitForTxnResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WaitForTxnResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WaitForTxnResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WaitForTxnResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WaitForTxnResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WaitForTxnResponseValidationError) ErrorName() string {
	return "WaitForTxnResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WaitForTxnResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWaitForTxnResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WaitForTxnResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WaitForTxnResponseValidationError{}
